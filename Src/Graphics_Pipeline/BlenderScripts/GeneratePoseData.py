##########
# Blender Script 
# To be Used with Imported MHX Mesh 

# Inputs Needed:
# 1 - readPaths (to be used for reading the paths to all the files in the CMU Database that were parsed)
# This path is to the file generated by the Explore Module of the Source Code
# 2 - outputPath (to be used for writing output files )

# Outputs : 
# Files with name 'Pose_<Pose_Number>.coords' corresponding 

# Author
# Mohammad Haris Baig
# baig.haris@gmail.com

# Script August: 2011
# Revision Number : 2

## Importing Functions From Blender OS and MakeHuman Scrips
import bpy
import os
import mathutils
from space_view3d_mhx_mocap import *

## Setting the Paths

# outputPath refers to the Directory where you want to output your files
outputPath = 'D:\\GSOC-Kinect\\Characters\\GirlTest\\AllPoses\\'

# readPaths refers to the path to the file containing the paths to all parsed bvh files.This file is generated by the Explore Module of the Source Code
readPaths = open('D:\\GSOC-Kinect\\Characters\\PathsForFiles.txt','r')

# This identifies the total number of files for whom the data is to be set
totalFiles = int(readPaths.readline())

## Initializations

# this is the declaration of the current pose adopted, it is also used to keep track of the current Pose output
currentPose = 0
# This is the initialization to the objects being used that are not going to be changed
currentScene = bpy.context.scene    
currentObject = currentScene.objects.active

# This is the main loop that will be doing the reading of different files and applying them to our rig
for aFile in range(0,totalFiles):
	
	# This function call is from the MakeHuman Library and will be used to read the BVH File being processed.
    loadRetargetSimplify(bpy.context, readPaths.readline().split('\n')[0])
	
	# The framesEnd specifies the number of Frames in the sequence without any subsampling
    framesEnd = int(bpy.context.scene.objects.active.animation_data.action.frame_range[1])+1
	
	# This loop will be used to put our rig in each of the Poses from the File and then output a .coords file corresponding to every Pose.
    for aFrame in range(0,framesEnd):
	
		# this line is used to set the scene to the frame we want to put the mesh in
        bpy.context.scene.frame_set(aFrame)
		
		# this command is used to actually transform the mesh, which is till now in its default  T pose, into the current Pose
        aMesh = bpy.context.scene.objects.active.children[1].to_mesh(currentScene,False,'PREVIEW')
		
		# obtaining the vertices from theMesh in the new pose
        theVertices = aMesh.vertices
		
		# informing the user of the currentPose that is being generated.
        print("Writing frame: %d"%currentPose)
		
		# Opening the writer for the current Pose file
        writerPose = open(path+'Pose_'+str(currentPose)+'.coords','w')
		
		# printing the number of Vertics in the File
		writerPose.write("%d\n"%len(theVertices))
        
		# printing the vertices of the pose to the file
		for aVertice in theVertices:			
			# writing the Pose Coordinates
            writerPose.write("%f %f %f\n"%(aVertice.co[0],aVertice.co[2],-aVertice.co[1]))
        
		# as the current poes has been output now so incrementing its counter
		currentPose = currentPose+1
        
		# Closing the write that was used to write the pose
		writerPose.close()
		
		# Deleting temporary variables created for just this pose to save memory space
        del aMesh
        del theVertices
	
	# attempting to clear the animation that was loaded.
    bpy.context.scene.objects.active.children[1].animation_data_clear()
    bpy.context.scene.objects.active.animation_data_clear()
    bpy.context.scene.animation_data_clear()